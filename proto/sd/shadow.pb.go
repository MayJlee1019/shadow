// 选择 proto3 语法

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.13.0
// source: shadow.proto

// 定义一个包名

package shadow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义一个请求结构体
// 可以定义多个传参
type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Action     string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	User       string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Cip        string `protobuf:"bytes,4,opt,name=cip,proto3" json:"cip,omitempty"`
	Filename   string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	IsRecover  string `protobuf:"bytes,6,opt,name=isRecover,proto3" json:"isRecover,omitempty"`
	Remotepath string `protobuf:"bytes,7,opt,name=remotepath,proto3" json:"remotepath,omitempty"`
	Timeout    string `protobuf:"bytes,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Limitspeed string `protobuf:"bytes,9,opt,name=limitspeed,proto3" json:"limitspeed,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shadow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shadow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_shadow_proto_rawDescGZIP(), []int{0}
}

func (x *ExecRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *ExecRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ExecRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ExecRequest) GetCip() string {
	if x != nil {
		return x.Cip
	}
	return ""
}

func (x *ExecRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ExecRequest) GetIsRecover() string {
	if x != nil {
		return x.IsRecover
	}
	return ""
}

func (x *ExecRequest) GetRemotepath() string {
	if x != nil {
		return x.Remotepath
	}
	return ""
}

func (x *ExecRequest) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *ExecRequest) GetLimitspeed() string {
	if x != nil {
		return x.Limitspeed
	}
	return ""
}

// 定义一个响应结构体
// 可以定义多个返回值
type ExecStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout string `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
}

func (x *ExecStreamResponse) Reset() {
	*x = ExecStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shadow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamResponse) ProtoMessage() {}

func (x *ExecStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shadow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamResponse.ProtoReflect.Descriptor instead.
func (*ExecStreamResponse) Descriptor() ([]byte, []int) {
	return file_shadow_proto_rawDescGZIP(), []int{1}
}

func (x *ExecStreamResponse) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

var File_shadow_proto protoreflect.FileDescriptor

var file_shadow_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x45, 0x78,
	0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x32, 0x5b, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x44, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x4d, 0x44,
	0x12, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shadow_proto_rawDescOnce sync.Once
	file_shadow_proto_rawDescData = file_shadow_proto_rawDesc
)

func file_shadow_proto_rawDescGZIP() []byte {
	file_shadow_proto_rawDescOnce.Do(func() {
		file_shadow_proto_rawDescData = protoimpl.X.CompressGZIP(file_shadow_proto_rawDescData)
	})
	return file_shadow_proto_rawDescData
}

var file_shadow_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_shadow_proto_goTypes = []interface{}{
	(*ExecRequest)(nil),        // 0: shadow.ExecRequest
	(*ExecStreamResponse)(nil), // 1: shadow.ExecStreamResponse
}
var file_shadow_proto_depIdxs = []int32{
	0, // 0: shadow.ShadowStreamService.ExecStreamCMD:input_type -> shadow.ExecRequest
	1, // 1: shadow.ShadowStreamService.ExecStreamCMD:output_type -> shadow.ExecStreamResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_shadow_proto_init() }
func file_shadow_proto_init() {
	if File_shadow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shadow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shadow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shadow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_shadow_proto_goTypes,
		DependencyIndexes: file_shadow_proto_depIdxs,
		MessageInfos:      file_shadow_proto_msgTypes,
	}.Build()
	File_shadow_proto = out.File
	file_shadow_proto_rawDesc = nil
	file_shadow_proto_goTypes = nil
	file_shadow_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShadowStreamServiceClient is the client API for ShadowStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShadowStreamServiceClient interface {
	// 以 rpc 开头，定义未实现的方法名称。 必须要有一个请求 message 和响应 message
	// rpc, returns 都是关键字
	ExecStreamCMD(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (ShadowStreamService_ExecStreamCMDClient, error)
}

type shadowStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShadowStreamServiceClient(cc grpc.ClientConnInterface) ShadowStreamServiceClient {
	return &shadowStreamServiceClient{cc}
}

func (c *shadowStreamServiceClient) ExecStreamCMD(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (ShadowStreamService_ExecStreamCMDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ShadowStreamService_serviceDesc.Streams[0], "/shadow.ShadowStreamService/ExecStreamCMD", opts...)
	if err != nil {
		return nil, err
	}
	x := &shadowStreamServiceExecStreamCMDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShadowStreamService_ExecStreamCMDClient interface {
	Recv() (*ExecStreamResponse, error)
	grpc.ClientStream
}

type shadowStreamServiceExecStreamCMDClient struct {
	grpc.ClientStream
}

func (x *shadowStreamServiceExecStreamCMDClient) Recv() (*ExecStreamResponse, error) {
	m := new(ExecStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShadowStreamServiceServer is the server API for ShadowStreamService service.
type ShadowStreamServiceServer interface {
	// 以 rpc 开头，定义未实现的方法名称。 必须要有一个请求 message 和响应 message
	// rpc, returns 都是关键字
	ExecStreamCMD(*ExecRequest, ShadowStreamService_ExecStreamCMDServer) error
}

// UnimplementedShadowStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedShadowStreamServiceServer struct {
}

func (*UnimplementedShadowStreamServiceServer) ExecStreamCMD(*ExecRequest, ShadowStreamService_ExecStreamCMDServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecStreamCMD not implemented")
}

func RegisterShadowStreamServiceServer(s *grpc.Server, srv ShadowStreamServiceServer) {
	s.RegisterService(&_ShadowStreamService_serviceDesc, srv)
}

func _ShadowStreamService_ExecStreamCMD_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShadowStreamServiceServer).ExecStreamCMD(m, &shadowStreamServiceExecStreamCMDServer{stream})
}

type ShadowStreamService_ExecStreamCMDServer interface {
	Send(*ExecStreamResponse) error
	grpc.ServerStream
}

type shadowStreamServiceExecStreamCMDServer struct {
	grpc.ServerStream
}

func (x *shadowStreamServiceExecStreamCMDServer) Send(m *ExecStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ShadowStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shadow.ShadowStreamService",
	HandlerType: (*ShadowStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecStreamCMD",
			Handler:       _ShadowStreamService_ExecStreamCMD_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shadow.proto",
}
